{
  "reportTitle": "cpsc310d3-priv",
  "stats": {
    "suites": 12,
    "tests": 10,
    "passes": 6,
    "pending": 0,
    "failures": 4,
    "start": "2016-12-24T22:58:29.932Z",
    "end": "2016-12-24T22:59:56.233Z",
    "duration": 86301,
    "testsRegistered": 25,
    "passPercent": 24,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 15,
    "hasSkipped": true,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "REST Interface",
        "suites": [
          {
            "title": "~Omega~REST PUT 204.",
            "suites": [],
            "tests": [
              {
                "title": "\n\t[ PUT http://localhost:4321/dataset/rooms ]",
                "fullTitle": "REST Interface ~Omega~REST PUT 204. \n\t[ PUT http://localhost:4321/dataset/rooms ]",
                "timedOut": false,
                "duration": 5008,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "isRoot": false,
                "uuid": "dd5ce74a-8294-4ffb-8cd6-88c640687259",
                "parentUUID": "dd32d49f-711c-4fae-b891-8ef7ee5d1c75",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 60000,
            "file": "/test/FacadeSpec.js",
            "uuid": "dd32d49f-711c-4fae-b891-8ef7ee5d1c75",
            "fullFile": "/home/nick/Projects/cpsc310d3-priv/test/FacadeSpec.js",
            "passes": [
              {
                "title": "\n\t[ PUT http://localhost:4321/dataset/rooms ]",
                "fullTitle": "REST Interface ~Omega~REST PUT 204. \n\t[ PUT http://localhost:4321/dataset/rooms ]",
                "timedOut": false,
                "duration": 5008,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "isRoot": false,
                "uuid": "dd5ce74a-8294-4ffb-8cd6-88c640687259",
                "parentUUID": "dd32d49f-711c-4fae-b891-8ef7ee5d1c75",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5008
          },
          {
            "title": "~Orion~Rest PUT 201.",
            "suites": [],
            "tests": [
              {
                "title": "\n\t[ PUT http://localhost:4321/dataset/rooms ]",
                "fullTitle": "REST Interface ~Orion~Rest PUT 201. \n\t[ PUT http://localhost:4321/dataset/rooms ]",
                "timedOut": false,
                "duration": 5005,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "isRoot": false,
                "uuid": "31b675a3-e22c-4f54-ad3d-e0f228d2a88d",
                "parentUUID": "1d5a6d6a-def7-4445-baba-423302c47bf7",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 60000,
            "file": "/test/FacadeSpec.js",
            "uuid": "1d5a6d6a-def7-4445-baba-423302c47bf7",
            "fullFile": "/home/nick/Projects/cpsc310d3-priv/test/FacadeSpec.js",
            "passes": [
              {
                "title": "\n\t[ PUT http://localhost:4321/dataset/rooms ]",
                "fullTitle": "REST Interface ~Orion~Rest PUT 201. \n\t[ PUT http://localhost:4321/dataset/rooms ]",
                "timedOut": false,
                "duration": 5005,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "isRoot": false,
                "uuid": "31b675a3-e22c-4f54-ad3d-e0f228d2a88d",
                "parentUUID": "1d5a6d6a-def7-4445-baba-423302c47bf7",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5005
          },
          {
            "title": "~Phoenix~REST PUT 400.",
            "suites": [],
            "tests": [
              {
                "title": "\n\t[ PUT http://localhost:4321/dataset/rooms ]",
                "fullTitle": "REST Interface ~Phoenix~REST PUT 400. \n\t[ PUT http://localhost:4321/dataset/rooms ]",
                "timedOut": false,
                "duration": 5005,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "isRoot": false,
                "uuid": "e8c7c097-45de-4fcf-b304-cb407165253f",
                "parentUUID": "37bfcfa3-ee43-4be3-96ca-5ed7ed28a306",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 60000,
            "file": "/test/FacadeSpec.js",
            "uuid": "37bfcfa3-ee43-4be3-96ca-5ed7ed28a306",
            "fullFile": "/home/nick/Projects/cpsc310d3-priv/test/FacadeSpec.js",
            "passes": [
              {
                "title": "\n\t[ PUT http://localhost:4321/dataset/rooms ]",
                "fullTitle": "REST Interface ~Phoenix~REST PUT 400. \n\t[ PUT http://localhost:4321/dataset/rooms ]",
                "timedOut": false,
                "duration": 5005,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "isRoot": false,
                "uuid": "e8c7c097-45de-4fcf-b304-cb407165253f",
                "parentUUID": "37bfcfa3-ee43-4be3-96ca-5ed7ed28a306",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5005
          },
          {
            "title": "~Revolution~ REST POST 424.",
            "suites": [],
            "tests": [
              {
                "title": "\n\t[ POST http://localhost:4321//query ]",
                "fullTitle": "REST Interface ~Revolution~ REST POST 424. \n\t[ POST http://localhost:4321//query ]",
                "timedOut": false,
                "duration": 5005,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "isRoot": false,
                "uuid": "84776877-2541-4a1c-8df4-190de1b5dc41",
                "parentUUID": "72dd35d6-b12e-4ee7-bef8-809324f09630",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 60000,
            "file": "/test/FacadeSpec.js",
            "uuid": "72dd35d6-b12e-4ee7-bef8-809324f09630",
            "fullFile": "/home/nick/Projects/cpsc310d3-priv/test/FacadeSpec.js",
            "passes": [
              {
                "title": "\n\t[ POST http://localhost:4321//query ]",
                "fullTitle": "REST Interface ~Revolution~ REST POST 424. \n\t[ POST http://localhost:4321//query ]",
                "timedOut": false,
                "duration": 5005,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "isRoot": false,
                "uuid": "84776877-2541-4a1c-8df4-190de1b5dc41",
                "parentUUID": "72dd35d6-b12e-4ee7-bef8-809324f09630",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5005
          },
          {
            "title": "~Piglet~ POST 200.",
            "suites": [],
            "tests": [
              {
                "title": "\n\t[ POST http://localhost:4321//query ]",
                "fullTitle": "REST Interface ~Piglet~ POST 200. \n\t[ POST http://localhost:4321//query ]",
                "timedOut": false,
                "duration": 5004,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "isRoot": false,
                "uuid": "87a2cbc2-02d1-4f1b-a635-ab809868bc6c",
                "parentUUID": "e503f3ba-b1cc-41eb-9802-ada2f6edf39e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 60000,
            "file": "/test/FacadeSpec.js",
            "uuid": "e503f3ba-b1cc-41eb-9802-ada2f6edf39e",
            "fullFile": "/home/nick/Projects/cpsc310d3-priv/test/FacadeSpec.js",
            "passes": [
              {
                "title": "\n\t[ POST http://localhost:4321//query ]",
                "fullTitle": "REST Interface ~Piglet~ POST 200. \n\t[ POST http://localhost:4321//query ]",
                "timedOut": false,
                "duration": 5004,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "isRoot": false,
                "uuid": "87a2cbc2-02d1-4f1b-a635-ab809868bc6c",
                "parentUUID": "e503f3ba-b1cc-41eb-9802-ada2f6edf39e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5004
          },
          {
            "title": "~Prelude~ REST DELETE 404.",
            "suites": [],
            "tests": [
              {
                "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
                "fullTitle": "REST Interface ~Prelude~ REST DELETE 404. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "err": {
                  "name": "AssertionError",
                  "message": "expected 400 to equal 404",
                  "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">404</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                },
                "isRoot": false,
                "uuid": "87a9d3fa-c17d-4b1f-b447-e4ccd5fb9335",
                "parentUUID": "aad0e21f-01a3-46f3-962b-bca6faa56372",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 60000,
            "file": "/test/FacadeSpec.js",
            "uuid": "aad0e21f-01a3-46f3-962b-bca6faa56372",
            "fullFile": "/home/nick/Projects/cpsc310d3-priv/test/FacadeSpec.js",
            "passes": [],
            "failures": [
              {
                "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
                "fullTitle": "REST Interface ~Prelude~ REST DELETE 404. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "err": {
                  "name": "AssertionError",
                  "message": "expected 400 to equal 404",
                  "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">404</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                },
                "isRoot": false,
                "uuid": "87a9d3fa-c17d-4b1f-b447-e4ccd5fb9335",
                "parentUUID": "aad0e21f-01a3-46f3-962b-bca6faa56372",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "~Python~ REST DELETE 204.",
            "suites": [],
            "tests": [
              {
                "title": "\n\t[ DELETE http://localhost:4321/dataset/rooms ]",
                "fullTitle": "REST Interface ~Python~ REST DELETE 204. \n\t[ DELETE http://localhost:4321/dataset/rooms ]",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "err": {
                  "name": "AssertionError",
                  "message": "expected 400 to equal 204",
                  "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">204</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                },
                "isRoot": false,
                "uuid": "512b51fb-e424-4b3b-81e7-945c3778b3cb",
                "parentUUID": "b0b1bd08-6aca-4b14-94d3-819123e8e1a2",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 60000,
            "file": "/test/FacadeSpec.js",
            "uuid": "b0b1bd08-6aca-4b14-94d3-819123e8e1a2",
            "fullFile": "/home/nick/Projects/cpsc310d3-priv/test/FacadeSpec.js",
            "passes": [],
            "failures": [
              {
                "title": "\n\t[ DELETE http://localhost:4321/dataset/rooms ]",
                "fullTitle": "REST Interface ~Python~ REST DELETE 204. \n\t[ DELETE http://localhost:4321/dataset/rooms ]",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "err": {
                  "name": "AssertionError",
                  "message": "expected 400 to equal 204",
                  "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">204</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                },
                "isRoot": false,
                "uuid": "512b51fb-e424-4b3b-81e7-945c3778b3cb",
                "parentUUID": "b0b1bd08-6aca-4b14-94d3-819123e8e1a2",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "~Quadro~ REST DELETE 404.",
            "suites": [],
            "tests": [
              {
                "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
                "fullTitle": "REST Interface ~Quadro~ REST DELETE 404. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "err": {
                  "name": "AssertionError",
                  "message": "expected 400 to equal 404",
                  "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">404</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                },
                "isRoot": false,
                "uuid": "87110502-8fbe-4858-8865-b25adceef178",
                "parentUUID": "51ad8760-6d9d-447e-b630-a0600486b0ba",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 60000,
            "file": "/test/FacadeSpec.js",
            "uuid": "51ad8760-6d9d-447e-b630-a0600486b0ba",
            "fullFile": "/home/nick/Projects/cpsc310d3-priv/test/FacadeSpec.js",
            "passes": [],
            "failures": [
              {
                "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
                "fullTitle": "REST Interface ~Quadro~ REST DELETE 404. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "err": {
                  "name": "AssertionError",
                  "message": "expected 400 to equal 404",
                  "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">404</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                },
                "isRoot": false,
                "uuid": "87110502-8fbe-4858-8865-b25adceef178",
                "parentUUID": "51ad8760-6d9d-447e-b630-a0600486b0ba",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "~Quantum~ REST POST 424.",
            "suites": [],
            "tests": [
              {
                "title": "\n\t[ POST http://localhost:4321//query ]",
                "fullTitle": "REST Interface ~Quantum~ REST POST 424. \n\t[ POST http://localhost:4321//query ]",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "err": {
                  "name": "AssertionError",
                  "message": "expected 400 to equal 424",
                  "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">424</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                },
                "isRoot": false,
                "uuid": "845b7571-d314-49bc-bb38-a778f792cb8b",
                "parentUUID": "f7dd6064-6a70-4003-8684-2830cd67c256",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 60000,
            "file": "/test/FacadeSpec.js",
            "uuid": "f7dd6064-6a70-4003-8684-2830cd67c256",
            "fullFile": "/home/nick/Projects/cpsc310d3-priv/test/FacadeSpec.js",
            "passes": [],
            "failures": [
              {
                "title": "\n\t[ POST http://localhost:4321//query ]",
                "fullTitle": "REST Interface ~Quantum~ REST POST 424. \n\t[ POST http://localhost:4321//query ]",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "err": {
                  "name": "AssertionError",
                  "message": "expected 400 to equal 424",
                  "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">424</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                },
                "isRoot": false,
                "uuid": "845b7571-d314-49bc-bb38-a778f792cb8b",
                "parentUUID": "f7dd6064-6a70-4003-8684-2830cd67c256",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "~Quicksilver~ REST POST 400.",
            "suites": [],
            "tests": [
              {
                "title": "\n\t[ POST http://localhost:4321//query ]",
                "fullTitle": "REST Interface ~Quicksilver~ REST POST 400. \n\t[ POST http://localhost:4321//query ]",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "isRoot": false,
                "uuid": "330feded-312a-497b-9c21-56e18e41d23b",
                "parentUUID": "7685f79b-95b3-4d20-8476-5de9d1510d3b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 60000,
            "file": "/test/FacadeSpec.js",
            "uuid": "7685f79b-95b3-4d20-8476-5de9d1510d3b",
            "fullFile": "/home/nick/Projects/cpsc310d3-priv/test/FacadeSpec.js",
            "passes": [
              {
                "title": "\n\t[ POST http://localhost:4321//query ]",
                "fullTitle": "REST Interface ~Quicksilver~ REST POST 400. \n\t[ POST http://localhost:4321//query ]",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                "isRoot": false,
                "uuid": "330feded-312a-497b-9c21-56e18e41d23b",
                "parentUUID": "7685f79b-95b3-4d20-8476-5de9d1510d3b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 11
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 60000,
        "file": "/test/FacadeSpec.js",
        "uuid": "9adb30bb-1a22-4200-b299-cf624972a259",
        "fullFile": "/home/nick/Projects/cpsc310d3-priv/test/FacadeSpec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "D3 Facade Tests",
        "suites": [],
        "tests": [
          {
            "title": "~Riviera~rooms_fullname should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Riviera~rooms_fullname should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "401add87-b336-4f4b-9eec-0b0e59aba928",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Romeo~rooms_shortname should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Romeo~rooms_shortname should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "b8e91270-fa47-43e9-ac70-a3b444e38d8a",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Royal~rooms_number should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Royal~rooms_number should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "04eae2b7-9d21-4a63-996e-9665ec3e88a4",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Sahara~rooms_name should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Sahara~rooms_name should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "ec4459e4-e062-4bf9-99fb-3a4651e22850",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Sacrilicious~rooms_address should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Sacrilicious~rooms_address should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "caabd1f8-fe7b-4217-90f7-7b6bd58a6c45",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Sirius~rooms_lat should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Sirius~rooms_lat should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "56ce7b1d-f5c0-492b-ad48-1cfb543c6228",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Sky~rooms_lon should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Sky~rooms_lon should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "1c5902e0-e536-4354-a434-a2d5ad586b33",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Snacktacular~rooms_seats should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Snacktacular~rooms_seats should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "4d868a10-f89d-4b93-864d-86998cd8a5bc",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Sputnik~rooms_type should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Sputnik~rooms_type should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "45bbb6c8-0a09-4b42-9b9b-73db01d384b2",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Stratos~rooms_furniture should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Stratos~rooms_furniture should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "765ed633-9427-497e-a00e-1821be8b5815",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~SteamedHam~rooms_href should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~SteamedHam~rooms_href should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "e7619313-57f6-4bc2-9d1b-07c49edbb3ee",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Revolution~Should not be possible to query multiple datasets at the same time.",
            "fullTitle": "D3 Facade Tests ~Revolution~Should not be possible to query multiple datasets at the same time.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "a5400bf7-eb5b-4351-8704-159db491f14f",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Stringer~Compound nested query on several properties.",
            "fullTitle": "D3 Facade Tests ~Stringer~Compound nested query on several properties.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "f0af2dfa-d90b-44cb-a682-5d8416316851",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Sunergy~Find the biggest room with some properties.",
            "fullTitle": "D3 Facade Tests ~Sunergy~Find the biggest room with some properties.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "1626dfba-9cd5-4ce1-8ec4-886390f987a0",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Topaz~Find some room aggregate properties in some areas.",
            "fullTitle": "D3 Facade Tests ~Topaz~Find some room aggregate properties in some areas.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "af113ada-4062-4bd5-9c2b-1d8f649732ab",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 60000,
        "file": "/test/FacadeSpec.js",
        "uuid": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
        "fullFile": "/home/nick/Projects/cpsc310d3-priv/test/FacadeSpec.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "~Riviera~rooms_fullname should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Riviera~rooms_fullname should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "401add87-b336-4f4b-9eec-0b0e59aba928",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Romeo~rooms_shortname should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Romeo~rooms_shortname should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "b8e91270-fa47-43e9-ac70-a3b444e38d8a",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Royal~rooms_number should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Royal~rooms_number should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "04eae2b7-9d21-4a63-996e-9665ec3e88a4",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Sahara~rooms_name should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Sahara~rooms_name should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "ec4459e4-e062-4bf9-99fb-3a4651e22850",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Sacrilicious~rooms_address should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Sacrilicious~rooms_address should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "caabd1f8-fe7b-4217-90f7-7b6bd58a6c45",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Sirius~rooms_lat should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Sirius~rooms_lat should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "56ce7b1d-f5c0-492b-ad48-1cfb543c6228",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Sky~rooms_lon should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Sky~rooms_lon should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "1c5902e0-e536-4354-a434-a2d5ad586b33",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Snacktacular~rooms_seats should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Snacktacular~rooms_seats should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "4d868a10-f89d-4b93-864d-86998cd8a5bc",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Sputnik~rooms_type should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Sputnik~rooms_type should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "45bbb6c8-0a09-4b42-9b9b-73db01d384b2",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Stratos~rooms_furniture should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~Stratos~rooms_furniture should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "765ed633-9427-497e-a00e-1821be8b5815",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~SteamedHam~rooms_href should be recognizable as valid key.",
            "fullTitle": "D3 Facade Tests ~SteamedHam~rooms_href should be recognizable as valid key.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "e7619313-57f6-4bc2-9d1b-07c49edbb3ee",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Revolution~Should not be possible to query multiple datasets at the same time.",
            "fullTitle": "D3 Facade Tests ~Revolution~Should not be possible to query multiple datasets at the same time.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "a5400bf7-eb5b-4351-8704-159db491f14f",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Stringer~Compound nested query on several properties.",
            "fullTitle": "D3 Facade Tests ~Stringer~Compound nested query on several properties.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "f0af2dfa-d90b-44cb-a682-5d8416316851",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Sunergy~Find the biggest room with some properties.",
            "fullTitle": "D3 Facade Tests ~Sunergy~Find the biggest room with some properties.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "1626dfba-9cd5-4ce1-8ec4-886390f987a0",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          },
          {
            "title": "~Topaz~Find some room aggregate properties in some areas.",
            "fullTitle": "D3 Facade Tests ~Topaz~Find some room aggregate properties in some areas.",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-built_in\">console</span>.log(test[<span class=\"hljs-string\">\"query\"</span>]);<br><span class=\"hljs-keyword\">var</span> query = test[<span class=\"hljs-string\">\"query\"</span>];<br><span class=\"hljs-keyword\">return</span> facade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>    verifyResult(test, set, res);<br>});",
            "isRoot": false,
            "uuid": "af113ada-4062-4bd5-9c2b-1d8f649732ab",
            "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
            "skipped": true
          }
        ],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 15,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 15,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 60000,
    "uuid": "d9e0e0bf-e5f8-4238-b71c-9bb491d2a8ea",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "\n\t[ PUT http://localhost:4321/dataset/rooms ]",
      "fullTitle": "~Omega~REST PUT 204. \n\t[ PUT http://localhost:4321/dataset/rooms ]",
      "timedOut": false,
      "duration": 5008,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "isRoot": false,
      "uuid": "896f5125-9f60-4bd9-a9dc-62e566edced9",
      "parentUUID": "dd32d49f-711c-4fae-b891-8ef7ee5d1c75",
      "skipped": false
    },
    {
      "title": "\n\t[ PUT http://localhost:4321/dataset/rooms ]",
      "fullTitle": "~Orion~Rest PUT 201. \n\t[ PUT http://localhost:4321/dataset/rooms ]",
      "timedOut": false,
      "duration": 5005,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "isRoot": false,
      "uuid": "b435c3c2-c7c3-4548-a675-f9bdc7060fe5",
      "parentUUID": "1d5a6d6a-def7-4445-baba-423302c47bf7",
      "skipped": false
    },
    {
      "title": "\n\t[ PUT http://localhost:4321/dataset/rooms ]",
      "fullTitle": "~Phoenix~REST PUT 400. \n\t[ PUT http://localhost:4321/dataset/rooms ]",
      "timedOut": false,
      "duration": 5005,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "isRoot": false,
      "uuid": "ac243807-80d9-4051-bcb9-78af50a83c5b",
      "parentUUID": "37bfcfa3-ee43-4be3-96ca-5ed7ed28a306",
      "skipped": false
    },
    {
      "title": "\n\t[ POST http://localhost:4321//query ]",
      "fullTitle": "~Revolution~ REST POST 424. \n\t[ POST http://localhost:4321//query ]",
      "timedOut": false,
      "duration": 5005,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "isRoot": false,
      "uuid": "d8cf7cc3-7f6d-48c3-a768-7bc6c8d7b368",
      "parentUUID": "72dd35d6-b12e-4ee7-bef8-809324f09630",
      "skipped": false
    },
    {
      "title": "\n\t[ POST http://localhost:4321//query ]",
      "fullTitle": "~Piglet~ POST 200. \n\t[ POST http://localhost:4321//query ]",
      "timedOut": false,
      "duration": 5004,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "isRoot": false,
      "uuid": "9c36145b-81fb-4e8a-bb5f-32529e2b1a58",
      "parentUUID": "e503f3ba-b1cc-41eb-9802-ada2f6edf39e",
      "skipped": false
    },
    {
      "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
      "fullTitle": "~Prelude~ REST DELETE 404. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 404",
        "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">404</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
      },
      "isRoot": false,
      "uuid": "d531e0c0-ad49-4085-b2fa-0b8a439f9226",
      "parentUUID": "aad0e21f-01a3-46f3-962b-bca6faa56372",
      "skipped": false
    },
    {
      "title": "\n\t[ DELETE http://localhost:4321/dataset/rooms ]",
      "fullTitle": "~Python~ REST DELETE 204. \n\t[ DELETE http://localhost:4321/dataset/rooms ]",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 204",
        "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">204</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
      },
      "isRoot": false,
      "uuid": "d1138561-121a-407c-ad4e-fd74d76fc050",
      "parentUUID": "b0b1bd08-6aca-4b14-94d3-819123e8e1a2",
      "skipped": false
    },
    {
      "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
      "fullTitle": "~Quadro~ REST DELETE 404. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 404",
        "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">404</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
      },
      "isRoot": false,
      "uuid": "12911f4b-d0b1-4e41-8cec-17c3b13dc131",
      "parentUUID": "51ad8760-6d9d-447e-b630-a0600486b0ba",
      "skipped": false
    },
    {
      "title": "\n\t[ POST http://localhost:4321//query ]",
      "fullTitle": "~Quantum~ REST POST 424. \n\t[ POST http://localhost:4321//query ]",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 424",
        "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">424</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
      },
      "isRoot": false,
      "uuid": "314bb6de-7850-4e4c-96ca-22daa88f4be4",
      "parentUUID": "f7dd6064-6a70-4003-8684-2830cd67c256",
      "skipped": false
    },
    {
      "title": "\n\t[ POST http://localhost:4321//query ]",
      "fullTitle": "~Quicksilver~ REST POST 400. \n\t[ POST http://localhost:4321//query ]",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "isRoot": false,
      "uuid": "a9a0f5d4-60f4-4677-bd64-a3524d829a4b",
      "parentUUID": "7685f79b-95b3-4d20-8476-5de9d1510d3b",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "\n\t[ PUT http://localhost:4321/dataset/rooms ]",
      "fullTitle": "~Omega~REST PUT 204. \n\t[ PUT http://localhost:4321/dataset/rooms ]",
      "timedOut": false,
      "duration": 5008,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "isRoot": false,
      "uuid": "7fd95d04-5834-4dba-a19c-8b10b634723f",
      "parentUUID": "dd32d49f-711c-4fae-b891-8ef7ee5d1c75",
      "skipped": false
    },
    {
      "title": "\n\t[ PUT http://localhost:4321/dataset/rooms ]",
      "fullTitle": "~Orion~Rest PUT 201. \n\t[ PUT http://localhost:4321/dataset/rooms ]",
      "timedOut": false,
      "duration": 5005,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "isRoot": false,
      "uuid": "59ac205b-56fc-4105-a69a-d0a4ab6a4b34",
      "parentUUID": "1d5a6d6a-def7-4445-baba-423302c47bf7",
      "skipped": false
    },
    {
      "title": "\n\t[ PUT http://localhost:4321/dataset/rooms ]",
      "fullTitle": "~Phoenix~REST PUT 400. \n\t[ PUT http://localhost:4321/dataset/rooms ]",
      "timedOut": false,
      "duration": 5005,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "isRoot": false,
      "uuid": "ddb59389-6f04-4709-9c30-75abd5183be5",
      "parentUUID": "37bfcfa3-ee43-4be3-96ca-5ed7ed28a306",
      "skipped": false
    },
    {
      "title": "\n\t[ POST http://localhost:4321//query ]",
      "fullTitle": "~Revolution~ REST POST 424. \n\t[ POST http://localhost:4321//query ]",
      "timedOut": false,
      "duration": 5005,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "isRoot": false,
      "uuid": "f18b8105-c735-41d9-ad1f-a4608f5bf24b",
      "parentUUID": "72dd35d6-b12e-4ee7-bef8-809324f09630",
      "skipped": false
    },
    {
      "title": "\n\t[ POST http://localhost:4321//query ]",
      "fullTitle": "~Piglet~ POST 200. \n\t[ POST http://localhost:4321//query ]",
      "timedOut": false,
      "duration": 5004,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "isRoot": false,
      "uuid": "bb29b1d6-b8cc-4477-8ee7-eb8181ef7cd8",
      "parentUUID": "e503f3ba-b1cc-41eb-9802-ada2f6edf39e",
      "skipped": false
    },
    {
      "title": "\n\t[ POST http://localhost:4321//query ]",
      "fullTitle": "~Quicksilver~ REST POST 400. \n\t[ POST http://localhost:4321//query ]",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "isRoot": false,
      "uuid": "7424c17f-03f8-47ae-8d85-43a7278c10db",
      "parentUUID": "7685f79b-95b3-4d20-8476-5de9d1510d3b",
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
      "fullTitle": "~Prelude~ REST DELETE 404. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 404",
        "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">404</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
      },
      "isRoot": false,
      "uuid": "37a80527-e9f5-444f-af8c-214df49c2562",
      "parentUUID": "aad0e21f-01a3-46f3-962b-bca6faa56372",
      "skipped": false
    },
    {
      "title": "\n\t[ DELETE http://localhost:4321/dataset/rooms ]",
      "fullTitle": "~Python~ REST DELETE 204. \n\t[ DELETE http://localhost:4321/dataset/rooms ]",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 204",
        "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">204</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
      },
      "isRoot": false,
      "uuid": "1e92b34c-b47e-406e-8e50-9940774d99c5",
      "parentUUID": "b0b1bd08-6aca-4b14-94d3-819123e8e1a2",
      "skipped": false
    },
    {
      "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
      "fullTitle": "~Quadro~ REST DELETE 404. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 404",
        "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">404</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
      },
      "isRoot": false,
      "uuid": "849abc50-7fb4-435a-91e0-7775a5653612",
      "parentUUID": "51ad8760-6d9d-447e-b630-a0600486b0ba",
      "skipped": false
    },
    {
      "title": "\n\t[ POST http://localhost:4321//query ]",
      "fullTitle": "~Quantum~ REST POST 424. \n\t[ POST http://localhost:4321//query ]",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 424",
        "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">424</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">186</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1081</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1001</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
      },
      "isRoot": false,
      "uuid": "8a805ef1-acaf-4c53-ac13-4cb9c9e9c194",
      "parentUUID": "f7dd6064-6a70-4003-8684-2830cd67c256",
      "skipped": false
    },
    {
      "title": "\"before all\" hook",
      "fullTitle": "D3 Facade Tests \"before all\" hook",
      "timedOut": true,
      "duration": 60005,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "Util_1.default.test(<span class=\"hljs-string\">\"QueryService::before() - started\"</span>);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> promises = [];<br>    <span class=\"hljs-keyword\">var</span> _loop_1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">id</span>) </span>{<br>        promises.push(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fulfill, reject</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> readStream = fs.readFileSync(<span class=\"hljs-string\">\"./310\"</span> + id + <span class=\"hljs-string\">\".1.0.zip\"</span>);<br>            facade.addDataset(id, readStream)<br>                .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>                Util_1.default.test(<span class=\"hljs-string\">\"QueryService::before() - stopped\"</span>);<br>                fulfill();<br>            }).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>                Util_1.default.error(<span class=\"hljs-string\">\"QueryService::before() - ERROR: \"</span> + err);<br>            });<br>        }));<br>    };<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = [<span class=\"hljs-string\">\"courses\"</span>, <span class=\"hljs-string\">\"rooms\"</span>]; _i &lt; _a.length; _i++) {<br>        <span class=\"hljs-keyword\">var</span> id = _a[_i];<br>        _loop_1(id);<br>    }<br>    <span class=\"hljs-built_in\">Promise</span>.all(promises).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>        done();<br>    }).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>        Util_1.default.error(<span class=\"hljs-string\">\"QueryService::before() - ERROR: \"</span> + err);<br>        done();<br>    });<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    Util_1.default.error(<span class=\"hljs-string\">\"QueryService::before() - ERROR: \"</span> + err);<br>    done();<br>}",
      "err": {
        "name": "Error",
        "message": "timeout of 60000ms exceeded. Ensure the done() callback is being called in this test.",
        "stack": "<span class=\"hljs-built_in\">Error</span>: timeout <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">60000</span>ms exceeded. Ensure the done() callback is being called <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">this</span> test."
      },
      "isRoot": false,
      "uuid": "208b1452-6976-4a0a-a8a4-c1cd009accef",
      "parentUUID": "9d8acdd9-46e4-44a9-a8c1-2ec2231cd5b5",
      "skipped": false
    }
  ],
  "copyrightYear": 2016
}